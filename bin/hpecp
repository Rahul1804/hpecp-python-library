#!/usr/bin/env python3

"""Prototype for HPE Container Platform API.

Required this functionality to be usable: https://github.com/google/python-fire/issues/239

Example configuration file  (~/.hpecp.conf):

[default]
api_host = 127.0.0.1
api_port = 8080
use_ssl = True
verify_ssl = False

[demosrv]
username = admin
password = admin123
"""

import os
import fire
from hpecp import ContainerPlatformClient
from hpecp.k8s_cluster import K8sClusterHostConfig, K8sClusterStatus

PROFILE = os.getenv('PROFILE', 'default')


def get_client():
  """Utility function to retrieve an authenticated client object"""
  client = ContainerPlatformClient.create_from_config_file(profile=PROFILE)
  client.create_session()
  return client

class K8sCluster(object):

  def create(self, 
                name,
                k8shosts_config,
                description=None, 
                k8s_version=None,
                pod_network_range='10.192.0.0/12', 
                service_network_range='10.96.0.0/12',
                pod_dns_domain='cluster.local',
                persistent_storage_local=False,
                persistent_storage_nimble_csi=False,
                ):
      """Create a K8s Cluster

      Example: 
      PROFILE=demosrv hpecp k8s_cluster create myclus1 /api/v2/worker/k8shost/1:master --k8s_version=1.17.0
      """

      host_config = [ K8sClusterHostConfig.create_from_list(h.split(':')) for h in k8shosts_config.split(',') ]

      print(get_client().k8s_cluster.create(name=name, 
                description=description, 
                k8s_version=k8s_version,
                pod_network_range=pod_network_range,
                service_network_range=service_network_range,
                pod_dns_domain=pod_dns_domain,
                persistent_storage_local=persistent_storage_local,
                persistent_storage_nimble_csi=persistent_storage_nimble_csi,
                k8shosts_config = host_config))

  def tabulate(self, all_columns=False, columns=['id', 'description']):
    """Print a table of K8s Clusters

    Example:
    PROFILE=demosrv hpecp k8s_cluster tabulate --columns=['id','description','status']
    """
    print(columns)

    if all_columns:
      print(get_client().k8s_cluster.list().tabulate())
    else:
      print(get_client().k8s_cluster.list().tabulate(columns=columns))

  def get(self, k8scluster_id):
    print(get_client().k8s_cluster.get(k8scluster_id=k8scluster_id))

  def wait_for_status(self, k8scluster_id, status=[], timeout_secs=60):
    """Wait for K8s Cluster to have one or more statuses

    Example: 
    PROFILE=demosrv hpecp k8s_cluster wait_for_status /api/v2/k8scluster/61 --status=['warning']
    """
    cluster_status = [ K8sClusterStatus[s] for s in status ]
    get_client().k8s_cluster.wait_for_status(k8scluster_id=k8scluster_id, status=cluster_status)
      
    
class CLI(object):

  def __init__(self):
    self.k8s_cluster = K8sCluster()


if __name__ == '__main__':
  fire.Fire(CLI)
