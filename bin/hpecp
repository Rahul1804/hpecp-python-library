#!/usr/bin/env python3

"""Prototype for HPE Container Platform API.

Required this functionality to be usable: https://github.com/google/python-fire/issues/239

Example configuration file  (~/.hpecp.conf):

[default]
api_host = 127.0.0.1
api_port = 8080
use_ssl = True
verify_ssl = False
ssl_warn = True

[demosrv]
username = admin
password = admin123
"""

import os
import fire
from hpecp import ContainerPlatformClient
from hpecp.k8s_cluster import K8sClusterHostConfig, K8sClusterStatus

PROFILE = os.getenv('PROFILE', 'default')
CONFIG_FILE = os.getenv('CONFIG_FILE', '~/.hpecp.conf')

def get_client():
  """Utility function to retrieve an authenticated client object"""
  client = ContainerPlatformClient.create_from_config_file(config_file=CONFIG_FILE, profile=PROFILE)
  client.create_session()
  return client

class K8sGateway(object):

  def create_with_ssh_key(self, ip, proxy_node_hostname, ssh_key=None, ssh_key_file=None, tags=[]):

    if ssh_key_file is not None:
          with open(ssh_key_file) as f:
            ssh_key_data = f.read()

    # TODO catch exception and present useful info to user, e.g. 409 Conflict
    print(get_client().gateway.create_with_ssh_key(
                                        ip=ip,
                                        proxy_node_hostname=proxy_node_hostname,
                                        ssh_key_data=ssh_key_data,
                                        tags=tags))

  def create_with_ssh_password(self):
    raise NotImplementedError("Not yet implemented by CLI")

  def get(self, gateway_id):
    print(get_client().gateway.get(gateway_id))

  def list(self):
    print(get_client().gateway.list())

  def delete(self, gateway_id):
    get_client().gateway.delete(gateway_id)

class K8sCluster(object):

  def create(self, 
                name,
                k8shosts_config,
                description=None, 
                k8s_version=None,
                pod_network_range='10.192.0.0/12', 
                service_network_range='10.96.0.0/12',
                pod_dns_domain='cluster.local',
                persistent_storage_local=False,
                persistent_storage_nimble_csi=False,
                ):
        """Create a K8s Cluster

        :param name: the cluster name
        :param k8shosts_config: k8s host ids and roles 'id1:master|worker,id2:master|worker,...'
        :param description: the cluster descripton
        :param k8s_version: e.g. 1.17.0
        :param pod_network_range: the pod network range, default='10.192.0.0/12'
        :param service_network_range: the service network range, default='10.96.0.0/12'
        :param pod_dns_domain: the pod dns domain, default='cluster.local'
        :param persistent_storage_local: True/False
        :param persistent_storage_nimble_csi: True/False
        """

        host_config = [ K8sClusterHostConfig.create_from_list(h.split(':')) for h in k8shosts_config.split(',') ]

        print(get_client().k8s_cluster.create(name=name, 
                description=description, 
                k8s_version=k8s_version,
                pod_network_range=pod_network_range,
                service_network_range=service_network_range,
                pod_dns_domain=pod_dns_domain,
                persistent_storage_local=persistent_storage_local,
                persistent_storage_nimble_csi=persistent_storage_nimble_csi,
                k8shosts_config = host_config))

  def tabulate(self, all_columns=False, columns=['id', 'description']):
    '''
    Print a table of K8s Clusters
    :param all_columns: (True/False) set to True to return all columns
    :param columns: (aaa) afadsfs
    '''

    if all_columns:
      print(get_client().k8s_cluster.list().tabulate())
    else:
      print(get_client().k8s_cluster.list().tabulate(columns=columns))

  def get(self, k8scluster_id):
    print(get_client().k8s_cluster.get(k8scluster_id=k8scluster_id))

  def wait_for_status(self, k8scluster_id, status=[], timeout_secs=60):
    """
    Wait for K8s Cluster to have one or more statuses
    :param k8scluster_id: Cluster id with format: /api/v2/k8scluster/[0-9]+
    :param status: status(es) to wait for with format: ['status1', 'status2', 'statusn']
    :param timeout_secs: how many secs to wait before exiting
    :returns True/False if status was found within timeout_secs. May raise APIException.
    """
    cluster_status = [ K8sClusterStatus[s] for s in status ]
    get_client().k8s_cluster.wait_for_status(k8scluster_id=k8scluster_id, status=cluster_status)
      
    
class CLI(object):

  def __init__(self):
    self.k8scluster = K8sCluster()
    self.gateway = K8sGateway()


if __name__ == '__main__':
  fire.Fire(CLI)
